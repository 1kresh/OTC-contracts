// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.19;

import {Test} from "forge-std/Test.sol";
import {Vm} from "forge-std/Vm.sol";
import {console} from "forge-std/console.sol";

import {OTC} from "../src/OTC.sol";
import {IOTC} from "../src/interfaces/IOTC.sol";
import {IPermit2} from "../src/interfaces/IPermit2.sol";
import { ERC20 } from "openzeppelin-contracts/contracts/token/ERC20/ERC20.sol";

// forge test --via-ir --fork-url https://sepolia.infura.io/v3/a523c91a0e474bd9800887c8c9ba4f18  -vvvv
contract OTCTest is Test {
    IOTC public otc;
    ERC20 token0;
    ERC20 token1;
    
    struct Wallet {
        address addr;
    }
    Vm.Wallet creator;
    Wallet customer;
    Vm.Wallet arbiter;

    function setUp() public {
        otc = IOTC(address(new OTC(0x000000000022D473030F116dDEE9F6B43aC78BA3, 0xDef1C0ded9bec7F1a1670819833240f027b25EfF)));
        token0 = ERC20(0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14);
        token1 = ERC20(0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984);
        otc.addToken(address(token0));
        otc.addToken(address(token1));

        otc.whitelistedTokens();

        creator = vm.createWallet(uint256(keccak256(bytes("1"))));
        customer = Wallet({addr: 0x67701e71F9412Af1BcB2D77897F40139B6Ccc073});
        arbiter = vm.createWallet(uint256(keccak256(bytes("3"))));
    }

    function test_whole(bool approved) public {
        vm.startPrank(creator.addr);

        otc.getPositions(0, 1000);
        otc.getPositionsByCreator(creator.addr, 0, 1000);

        otc.createPosition("### AAAAAAAAAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 10, address(token0), 1e17, false);
        
        otc.getPosition(0);
        otc.getPositions(0, 1000);
        otc.getPositionsByCreator(creator.addr, 0, 1000);
        otc.getPositionsByCreator(address(0), 0, 1000);
        
        vm.stopPrank();

        vm.startPrank(customer.addr);

        otc.getProcesses(0, 0, 1000);
        otc.getProcessesByPaticipant(customer.addr, 0, 1000);
        otc.getProcessesByPaticipant(address(0), 0, 1000);

        otc.createProcess(0, address(0), address(token1));

        otc.getProcess(IOTC.ProcessPointer(0, 0));
        otc.getProcesses(0, 0, 1000);
        otc.getProcessesByPaticipant(customer.addr, 0, 1000);
        otc.getProcessesByPaticipant(address(0), 0, 1000);

        token1.approve(otc.getPermit2(), type(uint256).max);
        IPermit2(otc.getPermit2()).approve(address(token1), address(otc), type(uint160).max, type(uint32).max);

        vm.stopPrank();

        vm.startPrank(creator.addr);

        bytes memory data = hex"415565b00000000000000000000000001f9840a85d5af5bf1d1762f925bdaddc4201f984000000000000000000000000fff9976782d46cc05630d1f6ebab18b2324d6b14000000000000000000000000000000000000000000000000017e9c37307e50d3000000000000000000000000000000000000000000000000017c23eedef7800000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000360000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000001f9840a85d5af5bf1d1762f925bdaddc4201f984000000000000000000000000fff9976782d46cc05630d1f6ebab18b2324d6b1400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000017c23eedef78000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000012556e6973776170563300000000000000000000000000000000000000000000000000000000000000017e9c37307e50d3000000000000000000000000000000000000000000000000017c23eedef78000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000003bfa4769fb09eefc5a80d6e87c3b9c650f7ae48e00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002b1f9840a85d5af5bf1d1762f925bdaddc4201f984002710fff9976782d46cc05630d1f6ebab18b2324d6b140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000001f9840a85d5af5bf1d1762f925bdaddc4201f984000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd000000000000000000000000100000000000000000000000000000000000001100000000000000000000000000000000bc7009580ad561ebf558c5898095178a";
        otc.startProcess(IOTC.ProcessPointer(0, 0), uint160(107695201954189523), data);
        
        otc.getProcess(IOTC.ProcessPointer(0, 0));

        otc.sendMessage(IOTC.ProcessPointer(0, 0), "OK1!");
        
        otc.getProcess(IOTC.ProcessPointer(0, 0));

        vm.stopPrank();

        vm.startPrank(customer.addr);

        otc.getProcess(IOTC.ProcessPointer(0, 0));

        otc.sendMessage(IOTC.ProcessPointer(0, 0), "OK2!");

        otc.getProcess(IOTC.ProcessPointer(0, 0));

        otc.finishProcess(IOTC.ProcessPointer(0, 0), approved);
        
        vm.stopPrank();

        otc.withdrawFees(address(token0));
    }

    function test_whole_with_arbiter(bool approved) public {
        vm.startPrank(creator.addr);

        otc.getPositions(0, 1000);
        otc.getPositionsByCreator(creator.addr, 0, 1000);

        otc.createPosition("### AAAAAAAAAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 10, address(token0), 1e17, false);
        
        otc.getPosition(0);
        otc.getPositions(0, 1000);
        otc.getPositionsByCreator(creator.addr, 0, 1000);
        otc.getPositionsByCreator(address(0), 0, 1000);
        
        vm.stopPrank();

        vm.startPrank(customer.addr);

        otc.getProcesses(0, 0, 1000);
        otc.getProcessesByPaticipant(customer.addr, 0, 1000);
        otc.getProcessesByPaticipant(address(0), 0, 1000);

        otc.createProcess(0, arbiter.addr, address(token1));

        otc.getProcess(IOTC.ProcessPointer(0, 0));
        otc.getProcesses(0, 0, 1000);
        otc.getProcessesByPaticipant(customer.addr, 0, 1000);
        otc.getProcessesByPaticipant(address(0), 0, 1000);

        token1.approve(otc.getPermit2(), type(uint256).max);
        IPermit2(otc.getPermit2()).approve(address(token1), address(otc), type(uint160).max, type(uint32).max);

        vm.stopPrank();

        vm.startPrank(creator.addr);

        bytes memory data = hex"415565b00000000000000000000000001f9840a85d5af5bf1d1762f925bdaddc4201f984000000000000000000000000fff9976782d46cc05630d1f6ebab18b2324d6b14000000000000000000000000000000000000000000000000017e9c37307e50d3000000000000000000000000000000000000000000000000017c23eedef7800000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000360000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000001f9840a85d5af5bf1d1762f925bdaddc4201f984000000000000000000000000fff9976782d46cc05630d1f6ebab18b2324d6b1400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000017c23eedef78000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000012556e6973776170563300000000000000000000000000000000000000000000000000000000000000017e9c37307e50d3000000000000000000000000000000000000000000000000017c23eedef78000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000003bfa4769fb09eefc5a80d6e87c3b9c650f7ae48e00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002b1f9840a85d5af5bf1d1762f925bdaddc4201f984002710fff9976782d46cc05630d1f6ebab18b2324d6b140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000001f9840a85d5af5bf1d1762f925bdaddc4201f984000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd000000000000000000000000100000000000000000000000000000000000001100000000000000000000000000000000bc7009580ad561ebf558c5898095178a";
        otc.startProcess(IOTC.ProcessPointer(0, 0), uint160(107695201954189523), data);
        
        otc.getProcess(IOTC.ProcessPointer(0, 0));

        otc.sendMessage(IOTC.ProcessPointer(0, 0), "OK1!");
        
        otc.getProcess(IOTC.ProcessPointer(0, 0));

        vm.stopPrank();

        vm.startPrank(customer.addr);

        otc.getProcess(IOTC.ProcessPointer(0, 0));

        otc.sendMessage(IOTC.ProcessPointer(0, 0), "OK2!");

        otc.getProcess(IOTC.ProcessPointer(0, 0));

        vm.stopPrank();

        vm.startPrank(arbiter.addr);

        otc.getProcess(IOTC.ProcessPointer(0, 0));

        otc.sendMessage(IOTC.ProcessPointer(0, 0), "OK3!");
        
        otc.getProcess(IOTC.ProcessPointer(0, 0));
    
        otc.finishProcess(IOTC.ProcessPointer(0, 0), approved);
        
        vm.stopPrank();
        
        otc.withdrawFees(address(token0));
    }

    function test_whole_same_tokens(bool approved) public {
        vm.startPrank(creator.addr);

        otc.getPositions(0, 1000);
        otc.getPositionsByCreator(creator.addr, 0, 1000);

        otc.createPosition("### AAAAAAAAAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 10, address(token1), 1e17, false);
        
        otc.getPosition(0);
        otc.getPositions(0, 1000);
        otc.getPositionsByCreator(creator.addr, 0, 1000);
        otc.getPositionsByCreator(address(0), 0, 1000);
        
        vm.stopPrank();

        vm.startPrank(customer.addr);

        otc.getProcesses(0, 0, 1000);
        otc.getProcessesByPaticipant(customer.addr, 0, 1000);
        otc.getProcessesByPaticipant(address(0), 0, 1000);

        otc.createProcess(0, address(0), address(token1));

        otc.getProcess(IOTC.ProcessPointer(0, 0));
        otc.getProcesses(0, 0, 1000);
        otc.getProcessesByPaticipant(customer.addr, 0, 1000);
        otc.getProcessesByPaticipant(address(0), 0, 1000);

        token1.approve(otc.getPermit2(), type(uint256).max);
        IPermit2(otc.getPermit2()).approve(address(token1), address(otc), type(uint160).max, type(uint32).max);

        vm.stopPrank();

        vm.startPrank(creator.addr);

        bytes memory data = hex"415565b00000000000000000000000001f9840a85d5af5bf1d1762f925bdaddc4201f984000000000000000000000000fff9976782d46cc05630d1f6ebab18b2324d6b14000000000000000000000000000000000000000000000000017e9c37307e50d3000000000000000000000000000000000000000000000000017c23eedef7800000000000000000000000000000000000000000000000000000000000000000af9840a85d5af5bf1d1762f925bdaddc4201f984000000000000000000000000fff9976782d46cc05630d1f6ebab18b2324d6b1400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000017c23eedef78000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000012556e6973776170563300000000000000000000000000000000000000000000000000000000000000017e9c37307e50d3000000000000000000000000000000000000000000000000017c23eedef78000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000003bfa4769fb09eefc5a80d6e87c3b9c650f7ae48e00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002b1f9840a85d5af5bf1d1762f925bdaddc4201f984002710fff9976782d46cc05630d1f6ebab18b2324d6b140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000001f9840a85d5af5bf1d1762f925bdaddc4201f984000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd000000000000000000000000100000000000000000000000000000000000001100000000000000000000000000000000bc7009580ad561ebf558c5898095178a";
        otc.startProcess(IOTC.ProcessPointer(0, 0), uint160(107695201954189523), data);
        
        otc.getProcess(IOTC.ProcessPointer(0, 0));

        otc.sendMessage(IOTC.ProcessPointer(0, 0), "OK1!");
        
        otc.getProcess(IOTC.ProcessPointer(0, 0));

        vm.stopPrank();

        vm.startPrank(customer.addr);

        otc.getProcess(IOTC.ProcessPointer(0, 0));

        otc.sendMessage(IOTC.ProcessPointer(0, 0), "OK2!");

        otc.getProcess(IOTC.ProcessPointer(0, 0));

        otc.finishProcess(IOTC.ProcessPointer(0, 0), approved);
        
        vm.stopPrank();

        otc.withdrawFees(address(token1));
    }
}
